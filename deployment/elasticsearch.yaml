# roughtly based on the official helm chart
# https://github.com/elastic/helm-charts/blob/main/elasticsearch/templates/statefulset.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: batts-elasticsearch-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: batts-elasticsearch
spec:
  selector:
    matchLabels:
      name: batts-elasticsearch
  serviceName: batts-elasticsearch
  template:
    metadata:
      labels:
        name: batts-elasticsearch
    spec:
      initContainers:
        - name: set-vm-sync-limit
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          securityContext:
            privileged: true
#        - name: keystore
      containers:
        - image: elasticsearch:8.11.0
          name: elasticsearch
          imagePullPolicy: IfNotPresent
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  
                  # Exit if ELASTIC_PASSWORD in unset
                  if [ -z "${ELASTIC_PASSWORD}" ]; then
                    echo "ELASTIC_PASSWORD variable is missing, exiting"
                    exit 1
                  fi
                  
                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file
                  
                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no
                  
                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s
                  
                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi
                  
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  
                    curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                  }
                  
                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "{{ include "elasticsearch.esMajorVersion" . }}" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi
                  
                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
          ports:
            - name: http
              containerPort: 9200
              protocol: TCP
            - name: transport
              containerPort: 9300
              protocol: TCP
          volumeMounts:
            - name: batts-elasticsearch-data
              mountPath: /usr/share/elasticsearch/data
          resources:
            requests:
              memory: "1.5G"
            limits:
              memory: "2G"
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.name
              value: "batts-elastic"
            - name: discovery.type
              value: "single-node"
            - name: xpack.security.autoconfiguration.enabled
              value: "false"
#            - name: xpack.security.enrollment.enabled
#              value: "true"
              # our disk margins are so, so small
            - name: cluster.routing.allocation.disk.watermark.low
              value: "4G"
            - name: cluster.routing.allocation.disk.watermark.high
              value: "3G"
            - name: cluster.routing.allocation.disk.watermark.flood_stage
              value: "2G"
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: batts-elasticsearch-secret
                  key: password
      volumes:
        - name: batts-elasticsearch-data
          persistentVolumeClaim:
            claimName: batts-elasticsearch-data
---
apiVersion: v1
kind: Service
metadata:
  name: batts-elasticsearch
  labels:
    name: batts-elasticsearch
spec:
  ports:
    - port: 9200
      targetPort: 9200
      protocol: TCP
  selector:
    name: batts-elasticsearch
  type: ClusterIP
